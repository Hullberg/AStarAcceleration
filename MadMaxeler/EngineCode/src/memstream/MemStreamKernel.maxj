package memstream;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class MemStreamKernel extends Kernel {

	private static final DFEType type = dfeInt(32);

	protected MemStreamKernel(KernelParameters parameters) {
		super(parameters);

		// From the MemStreamManager we get these variables from the stream.
		/*DFEVar x = io.input("x", type);
		DFEVar y = io.input("y", type);
		DFEVar u = io.input("u", type);
		DFEVar a = io.scalarInput("a", type);*/
		DFEVar vertex_label = (!vertex_label) ? io.scalarInput("vertex_label", type): output;
		DFEVar visited = io.scalarInput("visited", type);
		DFEVar parent_index = io.scalarInput("parent_index", type);
		DFEVar children = io.input("children", type);
		DFEVar end_id = io.scalarInput("end_id", type);

		// Here we do the maxeler-calculations
		//DFEVar sum = x + y + a;// + u;
		// Return the children
		DFEVar output = (vertex_label.eq(end_id)) ? end_id : children;

		// Send back to CPUCode/MemStreamCpuCode.c
		//io.output("s", sum, type);
		io.output("output", children, type);
	}

}
