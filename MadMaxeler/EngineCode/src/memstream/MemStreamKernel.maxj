package memstream;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class MemStreamKernel extends Kernel {

	private static final DFEType type = dfeUInt(32);

	protected MemStreamKernel(KernelParameters parameters) {
		super(parameters);
		//DFEVar data_w = io.input("data_w", type); // Can't use io.input("data_w") multiple times


		DFEVar sum = constant.var(dfeUInt(32), 0.0);


		//DFEVar data_w = null;
 		int n = 0;
 		// import data_r as well
 		// HARD CODE //
 		String[] stream_names = {"child_0", "child_1", "child_2", "child_3", "child_4"};
 		for (String name: stream_names) {
 			DFEVar child = io.input(name, type);
 			sum = sum + child;
 			n++;
 		}
 		// // //

		// From the MemStreamManager we get these variables from the stream.
		/*Map<String,KernelType<?>> stream_map =  io.getInputs();
		for (Map.Entry<String, KernelType<?>> entry : stream_map.entrySet())
		{
		    System.out.println(entry.getKey() + "/" + entry.getValue());
		   if (entry.getKey().equals(data_w)){
		    	data_w = io.input("data_w", type);
		    }
		    else{
		    	DFEVar child = io.input(entry.getKey(), type);
		    	sum = sum + child;
		    	n++;
		   }


		}*/

		DFEVar mean = sum/n;


		// Do stuff

		// Send back to CPUCode/MemStreamCpuCode.c

		io.output("data_w", mean, type);

	}

}
