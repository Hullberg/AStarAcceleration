package memstream;

import static com.maxeler.maxcompiler.v2.managers.standard.Manager.link;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.standard.IOLink.IODestination;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;

public class MemStreamManager {

	private static final String s_kernelName = "MemStreamKernel";

	public static void main(String[] args) {

		MemStreamEngineParameters params = new MemStreamEngineParameters(args);
		Manager manager = new Manager(params);
		Kernel  kernel  = new MemStreamKernel(manager.makeKernelParameters(s_kernelName));
		manager.setKernel(kernel);
		manager.setIO(
			link("children", IODestination.CPU),
			link("output", IODestination.CPU));

		// ^ From MemStreamCpuCode.c :
		// MemStream_writeLMem(0, ((int const size = 384)*sizeof(int32_t)), x)
		// MemStream(int scalar = 3, size, y, s, u)

		// Create a simple default SLiC interface.
		// This will assume all input/output streams have the same type and are of the same length.
		// The interface is defined in function below
		manager.createSLiCinterface(interfaceDefault());

		configBuild(manager, params);

		manager.build();
	}

	private static EngineInterface interfaceDefault() {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes   type = CPUTypes.INT32;
		int        size = type.sizeInBytes();
		// "Adds an interface parameter. The generated SLiC interface will allow users to set the value of used parameters at runtime." -docs
		// Add a single dataset size param N
		InterfaceParam  N    = engine_interface.addParam("N", CPUTypes.INT);
		//InterfaceParam	fk 	 = engine_interface.addParam("test", type);
		// Add a scalar parameters
		InterfaceParam  end_id     = engine_interface.addParam("end_id", CPUTypes.INT);
		InterfaceParam	vertex_label = engine_interface.addParam("vertex_label", CPUTypes.INT);
		InterfaceParam 	visited	= engine_interface.addParam("visited", CPUTypes.INT);
		InterfaceParam	parent_index = engine_interface.addParam("parent_index", CPUTypes.INT);
		InterfaceParam  zero = engine_interface.addConstant(0l);
		// Set kernel to run for N ticks (Number of ticks of the block
		engine_interface.setTicks(s_kernelName, N);

		// Set the streams to be of type INT32 (line 44) and size = N*sizeof(INT32)
		// I assume the scalar (named scalar in CpuCode.c is set here)
		// Below we set the parameters for MemStream in the CpuCode.
		engine_interface.setScalar(s_kernelName, "end_id", end_id);
		//engine_interface.setLMemLinear("x", zero, N * size);
		engine_interface.setScalar(s_kernelName, "vertex_label", vertex_label);
		engine_interface.setScalar(s_kernelName, "visited", visited);
		engine_interface.setScalar(s_kernelName, "parent_index", parent_index);
		engine_interface.setStream("children", type, N * size);
		engine_interface.setStream("output", type, N * size);

		engine_interface.ignoreAll(Direction.IN_OUT);
		return engine_interface;
		// These parameters are sent to EngineCode/src/memstream/MemStreamKernel.maxj
	}

	// Don't think we need to change things below.
	private static void configBuild(Manager manager, MemStreamEngineParameters params) {

		manager.setEnableStreamStatusBlocks(false);
		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}
}
