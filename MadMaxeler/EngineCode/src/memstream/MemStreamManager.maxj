package memstream;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;


class MemStreamManager extends CustomManager {
	public static int EDGE_COUNT = 8;
	private static final String child_name = "child_";
	private static final String[] children_names = new String[EDGE_COUNT];
	private static final String s_kernelName = "MemStreamKernel";

	MemStreamManager(EngineParameters engineParameters) {
		super(engineParameters);

		KernelBlock k = addKernel(new MemStreamKernel(makeKernelParameters(s_kernelName)));

		DFELink[] all_links = new DFELink[EDGE_COUNT];
		for(int i = 0; i < EDGE_COUNT;i++){
			children_names[i] = child_name+Integer.toString(i);
			all_links[i] = addStreamFromCPU(children_names[i]);
			k.getInput(children_names[i]) <== all_links[i];
		}

		DFELink data_w = addStreamToCPU("data_w");
		data_w <== k.getOutput("data_w");
	}

	static EngineInterface interfaceDefault() {
		EngineInterface ei = new EngineInterface();
		InterfaceParam size = ei.addParam("dataSize", CPUTypes.INT32);
		ei.setTicks(s_kernelName, size);
		for (int i = 0; i < EDGE_COUNT; i++) {
			ei.setStream(children_names[i], CPUTypes.INT32, size * CPUTypes.INT32.sizeInBytes());
		}
		ei.setStream("data_w", CPUTypes.INT32, size * CPUTypes.INT32.sizeInBytes());
		return ei;
	}


	public static void main(String[] args) {
		EngineParameters params = new EngineParameters(args);
		MemStreamManager manager = new MemStreamManager(params);
		manager.createSLiCinterface(interfaceDefault());
		manager.build();
	}

}