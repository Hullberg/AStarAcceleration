package memstream;

import static com.maxeler.maxcompiler.v2.managers.standard.Manager.link;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.standard.IOLink.IODestination;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;

public class MemStreamManager {

	private static final String s_kernelName = "MemStreamKernel";

	public static void main(String[] args) {

		MemStreamEngineParameters params = new MemStreamEngineParameters(args);
		Manager manager = new Manager(params);
		Kernel  kernel  = new MemStreamKernel(manager.makeKernelParameters(s_kernelName));
		manager.setKernel(kernel);
		manager.setIO(
			link("vertices", IODestination.CPU),
			link("edges", IODestination.LMEM_LINEAR_1D),
			link("data_r", IODestination.CPU),
			link("data_w", IODestination.CPU),
			link("edge_counter", IODestination.CPU));

		manager.createSLiCinterface(interfaceDefault());

		configBuild(manager, params);

		manager.build();
	}

	private static EngineInterface interfaceDefault() {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes   type = CPUTypes.INT32;
		int        size = type.sizeInBytes();
		// "Adds an interface parameter. The generated SLiC interface will allow users to set the value of used parameters at runtime." -docs
		// Add a single dataset size param N
		InterfaceParam  vertex_size    = engine_interface.addParam("vertex_size", CPUTypes.INT);
		InterfaceParam	edge_size = engine_interface.addParam("edge_size", CPUTypes.INT);
		InterfaceParam  zero = engine_interface.addConstant(0l);
		// Set kernel to run for N ticks (Number of ticks of the block
		engine_interface.setTicks(s_kernelName, vertex_size);

		// Below we set the parameters for MemStream in the CpuCode.
		engine_interface.setLMemLinear("edges", zero, edge_size);
		
		engine_interface.setStream("vertices", type, vertex_size * size);
		engine_interface.setStream("data_r", type, vertex_size * size);
		engine_interface.setStream("data_w", type, vertex_size * size);
		engine_interface.setStream("edge_counter", type, vertex_size * size);

		engine_interface.ignoreAll(Direction.IN_OUT);
		return engine_interface;
		// These parameters are sent to EngineCode/src/memstream/MemStreamKernel.maxj
	}

	// Don't think we need to change things below.
	private static void configBuild(Manager manager, MemStreamEngineParameters params) {

		manager.setEnableStreamStatusBlocks(false);
		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}
}
